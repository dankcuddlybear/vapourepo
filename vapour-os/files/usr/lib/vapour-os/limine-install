#!/bin/bash
DISTRO_ID="vapour-os"
[ $(whoami) != "root" ] && echo "[ERROR] You must run this script with root priviliges." && exit 1
ROOT_UUID="$(cat /etc/fstab | grep " / " | cut -d ' ' -f 1)"
if [ -z "$ROOT_UUID" ]; then
	echo "[ERROR] You must set UUID=<root partition UUID> in /etc/fstab"
	exit 1
else ROOT_UUID=${ROOT_UUID#?????}; fi
if [ ! -b "/dev/disk/by-uuid/$ROOT_UUID" ]; then
	echo "[ERROR] /dev/disk/by-uuid/$ROOT_UUID does not exist! Please update the root UUID in /etc/fstab"
	exit 1
fi
BOOT_UUID="$(cat /etc/fstab | grep " /boot " | cut -d ' ' -f 1)"
if [ -z "$BOOT_UUID" ]; then
	echo "[ERROR] You must set UUID=<boot partition UUID> in /etc/fstab"
	exit 1
else BOOT_UUID=${BOOT_UUID#?????}; fi
if [ ! -b "/dev/disk/by-uuid/$BOOT_UUID" ]; then
	echo "[ERROR] /dev/disk/by-uuid/$BOOT_UUID does not exist! Please update the boot UUID in /etc/fstab"
	exit 1
fi
BOOT_DEV="$(readlink -f /dev/disk/by-uuid/$BOOT_UUID)"
# This code does not work with more than 10 nvme or mmcblk drives. Fix it.
if [ "${BOOT_DEV:5:2}" == "hd" ] || [ "${BOOT_DEV:5:2}" == "sd" ] || [ "${BOOT_DEV:5:2}" == "vd" ]; then
	BOOT_DISK="${BOOT_DEV:0:8}"
	BOOT_PART="${BOOT_DEV:8:3}"
elif [ "${BOOT_DEV:5:4}" == "nvme" ]; then
	BOOT_DISK="${BOOT_DEV:0:12}"
	BOOT_PART="${BOOT_DEV:13:3}"
elif [ "${BOOT_DEV:5:6}" == "mmcblk" ]; then
	BOOT_DISK="${BOOT_DEV:0:12}"
	BOOT_PART="${BOOT_DEV:13:3}"
fi

EFI_BITS="$(cat /sys/firmware/efi/fw_platform_size 2> /dev/null)"
Upgrade() {
	mkdir -p /boot/limine /boot/EFI/limine &> /dev/null
	cp /usr/share/limine/limine.sys /boot/limine/
	limine-deploy $BOOT_DISK
	if [ -z "$EFI_BITS" ]; then
		cp /usr/share/limine/BOOTIA32.EFI /boot/EFI/limine/
		cp /usr/share/limine/BOOTX64.EFI /boot/EFI/limine/
	elif [ "$EFI_BITS" == 32 ]; then
		rm /boot/EFI/limine/BOOTX64.EFI &> /dev/null
		cp /usr/share/limine/BOOTIA32.EFI /boot/EFI/limine/
	elif [ "$EFI_BITS" == 64 ]; then
		rm /boot/EFI/limine/BOOTIA32.EFI &> /dev/null
		cp /usr/share/limine/BOOTX64.EFI /boot/EFI/limine/
	fi
}

[ -z "$1" ] && echo "[ERROR] No command (install/upgrade/uninstall)" && exit 1
case "$1" in
	install)
		Upgrade
		cp /usr/share/$DISTRO_ID/custom-configs/limine.cfg /boot/limine/
		# Set CPU if AMD or Intel, otherwise disable microcode loading altogether
		if [ -f /boot/amd-ucode.img ]; then sed -i "s/^.*\${CPU}=.*$/\${CPU}=amd/" /boot/limine/limine.cfg
		elif [ -f /boot/intel-ucode.img ]; then sed -i "s/^.*\${CPU}=.*$/\${CPU}=amd/" /boot/limine/limine.cfg
		else
			sed -i "/MODULE_PATH=boot:\/\/\/\${CPU}-ucode.img/d" /boot/limine/limine.cfg
		fi
		# Set KERNEL to first kernel found
		KERNEL_FILE="$(basename "$(ls /boot/vmlinu*-linux* | tr '\n' ' ' | awk '{print $1}')")"
		KERNEL="${KERNEL_FILE:8}"
		sed -i "s/^.*\${KERNEL}=.*$/\${KERNEL}=$KERNEL/" /boot/limine/limine.cfg
		# Set ROOT_UUID
		sed -i "s/^.*\${ROOT_PARAMS}=.*$/\${ROOT_PARAMS}=rw root=UUID=$ROOT_UUID/" /boot/limine/limine.cfg
		if [ -z "$EFI_BITS" ]; then # Create EFI boot entry (or don't)
			echo "[WARNING] System was booted in BIOS mode. No UEFI boot entries were created."
		elif [ "$EFI_BITS" == 32 ]; then efibootmgr -c -d $ROOT_DEV -p $BOOT_PART -L "Limine" -l '\EFI\Limine\BOOTIA32.EFI'
		elif [ "$EFI_BITS" == 64 ]; then efibootmgr -c -d $ROOT_DEV -p $BOOT_PART -L "Limine" -l '\EFI\Limine\BOOTX64.EFI'
		fi;;
	upgrade) Upgrade;;
	uninstall) limine-deploy --undeploy $ROOT_DEV; rm -rf /boot/limine /boot/EFI/limine;;
	*) echo "[ERROR] Unrecognised command \"$1\""; exit 1;;
esac
