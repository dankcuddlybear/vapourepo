################ [ FRAME SETTINGS ] ################
# Maximum latency in frames (1-16)
dxgi.maxFrameLatency = 2
d3d9.maxFrameLatency = 2

# Maximum frames per second
# Useful for buggy games with physics/other simulation tied to their frame rate, but do not provide their own limiter.
#dxgi.maxFrameRate = 60
#d3d9.maxFrameRate = 60

################ [ VSYNC SETTINGS ] ################
# Synchronization interval (Vsync) for presentation
# A positive value 'n' will enable Vsync and repeat the same image n times.
# Setting this to 0 disables vertical synchronization entirely, and a negative value will have no effect.
dxgi.syncInterval = 0
d3d9.presentInterval = 0

# Tear-free (Auto/True/False)
#  - True: Enable tear-free mailbox present mode if regular Vsync disabled.
#    May be unsupported on some systems or require setting dxgi.numBackBuffers to a higher value in order to work properly.
#  - False: Enables relaxed FIFO present mode if regular Vsync enabled. May cause tearing but reduce stutter if FPS is too low.
#    May be unsupported on some systems.
dxgi.tearFree = False
d3d9.tearFree = False

################ [ BUFFER SETTINGS ] ################
# Override back buffer count for the Vulkan swap chain (2 or more)
dxgi.numBackBuffers = 2
d3d9.numBackBuffers = 2

# Disable front buffer (True/False)
#d3d9.noExplicitFrontBuffer = False

# Device Local Constant Buffers (True/False)
# Enables using device local, host accessible memory for constant buffers in D3D9.
# This tends to actually be slower for some reason on AMD, and the exact same performance on NVIDIA.
#d3d9.deviceLocalConstantBuffers = False

################ [ GRAPHICS QUALITY SETTINGS ] ################
# Maximum allowed tessellation factor (8-64).
# Can be used to improve performance in titles which overuse tessellation.
d3d11.maxTessFactor = 8

# Override anisotropic filtering for all samplers (0-16).
# Set to a positive value to enable AF for all samplers in the game, or 0 to disable entirely.
d3d11.samplerAnisotropy = 0
d3d9.samplerAnisotropy = 0

# Change mipmap LOD bias for all samplers (-2.0 to 1.0).
# The given number will be added to application-provided LOD bias, rather than replacing it entirely.
# Positive values will reduce texture detail, while negative values may increase sharpness at the cost of shimmer.
#d3d11.samplerLodBias = 0.0

# Override application's MSAA level on the swapchain
# Supported values: -1 (application) and 0 to 16 (user override)
d3d9.forceSwapchainMSAA = 0

# Disable MSAA (True/False)
# Force sample count of all textures to 1, and perform needed fixups in resolve operations and shaders.
d3d11.disableMsaa = True

# Seamless cube maps (True/False)
d3d9.seamlessCubes = True

################ [ ACCURACY SETTINGS ] ################
# Assume single-use mode for command lists created on deferred contexts (True/False)
# May improve performance but also cause rendering issues.
d3d11.dcSingleUseMode = True

# Enables relaxed pipeline barriers around UAV writes (True/False)
# May improve performance but also cause rendering issues. Please don't report bugs with the option enabled.
d3d11.relaxedBarriers = True

# Ignore barriers around UAV writes from fragment shaders (True/False)
# May improve performance but also cause rendering issues. Please don't report bugs with the option enabled.
d3d11.ignoreGraphicsBarriers = True

# Declare vertex positions as invariant (True/False)
# Solves potential Z-fighting issues at a small performance cost.
d3d11.invariantPosition = False
d3d9.invariantPosition = False

# Force enable/disable floating point quirk emulation. Supported values:
# - Strict: Use slower but more correct approach. Necessary for some games
# - True: Use faster but less accurate approach. Good enough for most games
# - False: Disable float emulation completely
# - Auto: DXVK will pick automatically
d3d9.floatEmulation = True

# Long Mad (True/False)
# Should we make our Mads a FFma or do it the long way with an FMul and an FAdd?
# This solves some rendering bugs in games that have z-pass shaders which don't match entirely to the regular vertex shader in this way.
#d3d9.longMad = False

################ [ DXVK-ASYNC SETTINGS ] ################
# Enable async patch (requires dxvk-async-git) (True/False)
dxvk.enableAsync = true

# Number of async pipeline compiler threads (0: determine automatically)
#dxvk.numAsyncThreads = 0

################ [ MEMORY SETTINGS ] ################
# Override reported maximum device and shared system memory in MiB.
# May fix texture streaming issues in games that don't support cards with lots of VRAM.
#dxgi.maxDeviceMemory = 64
#dxgi.maxSharedMemory = 64

# Some games think we're on Intel given a lack of NVAPI or AGS/atiadlxx support.
# Report device memory as shared memory, and some small amount for a "carveout" (True/False)
#dxgi.emulateUMA = False

# Virtual memory limit for locked D3D9 textures in MiB (0: disable limit)
# DOES NOT IMPACT ACTUAL MEMORY CONSUMPTION OR TEXTURE QUALITY. DO NOT CHANGE UNLESS YOU HAVE A GOOD REASON.
#d3d9.textureMemory = 0

# Clear workgroup memory in compute shaders to zero. (True/False)
# Some games don't do this and rely on undefined behaviour. May reduce performance.
d3d11.zeroWorkgroupMemory = False

# Resource size limit for implicit discards in KiB
# For small staging resources mapped with MAP_WRITE, DXVK will sometimes allocate new backing
# storage in order to avoid GPU synchronization, so setting this too high may cause memory issues.
# Set to -1 to disable limit.
#d3d11.maxImplicitDiscardSize = 256

# Resource size limit for buffer-mapped dynamic images in KiB
# A higher threshold may reduce memory usage and PCI-E bandwidth in some games, but may also increase GPU synchronizations.
# Set to -1 to disable limit.
#d3d11.maxDynamicImageBufferSize = -1

# Allocate dynamic resources with given set of bind flags in cached system memory rather than uncached memory or host-visible VRAM,
# in order to allow fast readback from the CPU. This is only useful for buggy applications, and may reduce GPU-bound performance.
# Supported values: Any combination of the following:
# - v: Vertex buffers
# - i: Index buffers
# - c: Constant buffers
# - r: Shader resources
# - a: All dynamic resources
#d3d11.cachedDynamicResources = ""

# Change max initial value used in tracking and GetAvailableTextureMem
# Max available memory in MiB
#d3d9.maxAvailableMemory = 4096
# Memory tracking testing (True/False)
#d3d9.memoryTrackTest = False

################ [ COMPATIBILITY SETTINGS ] ################
# Create VkSurface on first call to IDXGISwapChain::Present rather than when creating swap chain (True/False)
# Some games that start rendering with a different API may require this, otherwise the window may stay black.
dxgi.deferSurfaceCreation = True
d3d9.deferSurfaceCreation = True

# Override reported PCI vendor/device IDs (4-digit hex value)
#dxgi.customDeviceId = 0000
#dxgi.customVendorId = 0000
#d3d9.customDeviceId = 0000
#d3d9.customVendorId = 0000

# Override reported device description (string)
#dxgi.customDeviceDesc = ""
#d3d9.customDeviceDesc = ""

# Report Nvidia GPUs as AMD GPUs by default (True/False)
# Enabled by default to work around issues with NVAPI, but may cause issues in some games.
dxgi.nvapiHack = False

# Reported shader model (1-3)
#d3d9.shaderModel = 3

# Override maximum feature level for D3D11 device
# Setting this higher may allow some applications to run that would otherwise fail to create a D3D11 device.
# Supported values: 9_1, 9_2, 9_3, 10_0, 10_1, 11_0, 11_1, 12_0, 12_1
#d3d11.maxFeatureLevel = 12_1

# Force Sampler Type Spec Constants (True/False)
# Useful if games use the wrong image and sampler type combo like Halo: CE or Spellforce.
# Can fix rendering in older, broken games in some instances.
#d3d9.forceSamplerTypeSpecConstants = False

# Only expose modes with a given aspect ratio. Useful for titles that break if they see ultra-wide.
# Supported values: Any ratio, ie. "16:9", "4:3"
#d3d9.forceAspectRatio = "4:3"

# Allow the discard lock flag to be used (True/False)
# Useful if some apps use this incorrectly.
#d3d9.allowDiscard = True

# Support X4R4G4B4 format (True/False)
# The Sims 2 is a horrible game made by complete morons.
#d3d9.supportX4R4G4B4 = True

# Disable support for A8 format render targets (True/False)
# Once again, The Sims 2 is a horrible game made by complete morons.
#d3d9.disableA8RT = False

# Support vendor extension DF floating point depth formats (True/False)
#d3d9.supportDFFormats = True

# Support D32 format (True/False)
#d3d9.supportD32 = True

# Use D32f for D24 (True/False)
# Useful for reproducing AMD issues on other hardware.
#d3d9.useD32forD24 = False

# Support for VCache Query (True/False)
# Used internally. Not very important as a user config.
# Defaults to True if vendorId == 0x10de
#d3d9.supportVCache = True

################ [ MISC SETTINGS ] ################
# Number of pipeline compiler threads.
# If the graphics pipeline library feature is enabled, the given number of threads will be used for shader compilation.
# Some of these threads will be reserved for high-priority work.
# Supported values: 0 to use all available CPU cores, or any positive number to enforce the thread count
#dxvk.numCompilerThreads = 0

# Controls pipeline lifetime tracking (Auto/True/False)
# If enabled, pipeline libraries will be freed aggressively in order save memory and address space.
# If set to Auto, will enable tracking for 32-bit applications only.
# Has no effect if graphics pipeline libraries are not supported or disabled.
#dxvk.trackPipelineLifetime = Auto

# Enable dialog box mode (True/False)
# Changes the default state of dialog box mode. *Disables* exclusive fullscreen when enabled.
#d3d9.enableDialogMode = False

# Toggles raw SSBO usage (Auto/True/False)
# Uses storage buffers to implement raw and structured buffer views.
# Enabled by default on hardware which has a storage buffer offset alignment requirement of 4 Bytes (e.g. AMD).
# Enabling this may improve performance, but is not safe on hardware with higher alignment requirements.
#dxvk.useRawSsbo = Auto

# Sets enabled HUD elements
# Behaves like the DXVK_HUD environment variable if the environment variable is not set, otherwise it will be ignored. The syntax is identical.
#dxvk.hud =

# Lenient Clear (True/False)
# Decides whether or not we fastpath clear anyway if we are close enough to clearing a full render target.
d3d9.lenientClear = True

# Enumerate by Displays (True/False)
# May be useful in PRIME setups.
# True: Enumerate D3D9 adapters by display (windows behaviour)
# False: Enumerate by physical adapter
d3d9.enumerateByDisplays = False

# DPI Awareness (True/False)
# Decides whether we should call SetProcessDPIAware on device creation.
# Helps avoid upscaling blur in modern Windows on Hi-DPI screens/devices.
#d3d9.dpiAware = True

# Strict Constant Copies (True/False)
# Decides whether we should always copy defined constants to the UBO when relative addressing is used,
# or only when the relative addressing starts a defined constant.
#d3d9.strictConstantCopies = False

# Strict Pow (True/False)
# Decides whether we have an opSelect for handling pow(0,0) = 0 otherwise it becomes undefined.
#d3d9.strictPow = True

################ [ DEBUG SETTINGS ] ################
# Debug Utils (True/False)
# Enables user annotations like BeginEvent()/EndEvent(). Can also be enabled with DXVK_DEBUG=markers environment variable.
#dxvk.enableDebugUtils = False

# APITrace Mode (True/False)
# Makes all host visible buffers cached and coherent. Improves performance when apitracing, but also can impact some dumb games.
#d3d9.apitraceMode = False

# Force-enable the D3D11 context lock via the ID3D10Multithread interface (True/False)
# May be useful to debug race conditions.
#d3d11.enableContextLock = False

# Controls graphics pipeline library behaviour
# Can be used to change VK_EXT_graphics_pipeline_library usage for debugging purpose.
# Doing so will likely result in increased stutter or degraded performance.
# Supported values:
# - Auto: Enable if supported, and compile optimized pipelines in the background
# - True: Enable if supported, but do not compile optimized pipelines
# - False: Always disable the feature
# Enabling dxvk-async will force disable this option. This is currently necessary for dxvk-async to work.
#dxvk.enableGraphicsPipelineLibrary = Auto
