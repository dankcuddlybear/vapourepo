#!/bin/sh
DISTRO_NAME="$(cat /usr/lib/os-release | grep -i "PRETTY_NAME" | cut -d '=' -f 2 | sed 's/"//g')"
SCRIPT_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
SCRIPT_USER="$(whoami)"
BACKTITLE="$DISTRO_NAME settings [$SCRIPT_USER]"
USERNAME="$1"
[ -z "$USERNAME" ] && echo "[ERROR] No user specified" && exit 1

LockAccount() {
	pkill -u $1 && passwd -l $1 || echo "[ERROR] Could not kick user $1"
}

## User menu
CHOICE="none"; while [ ! -z $CHOICE ]; do
	# Get admin status
	(groups "$USERNAME" | grep "wheel" &> /dev/null) && USERNAME_IS_ADMIN=1 || USERNAME_IS_ADMIN=0
	# Get password and lock status
	if (passwd -S $USERNAME | grep "$USERNAME NP " &> /dev/null); then
		HAS_PASSWD=0; LOCK_CHOICE="l"
	elif (passwd -S $USERNAME | grep "$USERNAME L " &> /dev/null); then
		HAS_PASSWD=0; LOCK_CHOICE="u"
	else HAS_PASSWD=1; LOCK_CHOICE="l"; fi

	## Get home encryption status (u: unlocked, l: locked, n: not encrypted)
	case "$("$SCRIPT_DIR/user-encrypt" "$USERNAME" status)" in
		"Encrypted, unlocked") ENCRYPTED_HOME="u";;
		"Encrypted, locked") ENCRYPTED_HOME="l";;
		"Not encrypted") ENCRYPTED_HOME="n";;
	esac

	## Set menu strings
	if [ "$LOCK_CHOICE" == "l" ]; then LOCK_TEXT="Lock account"
	else LOCK_TEXT="Unlock account"; fi
	if [ "$ENCRYPTED_HOME" == "n" ]; then ENCRYPT_TEXT="Encrypt home directory"
	else ENCRYPT_TEXT="Disable encryption of home directory"; fi
	if [ "$USERNAME_IS_ADMIN" == 0 ]; then ADMIN_TEXT="Make administrator"
	elif [ $NUM_ADMIN_USERS -le 1 ]; then
		ADMIN_TEXT="You are the only administrator"
	else ADMIN_TEXT="Remove administrator"; fi
	if [ "$HAS_PASSWD" == 0 ]; then PASSWD_TEXT="Set password (recommended)"
	elif [ "$HAS_PASSWD" == 0 ] && [ "$LOCK_CHOICE" == "u" ]; then
		PASSWD_TEXT="Unlock account first to set password"
	else PASSWD_TEXT="Change password"; fi

	if [ "$HAS_PASSWD" == 1 ]; then
		CHOICE=$(dialog --stdout --backtitle "$BACKTITLE" --title "Users - $USERNAME" --menu "Settings for user $USERNAME" 0 0 0 \
		"p" "$PASSWD_TEXT" "r" "Remove password" \
		"a" "$ADMIN_TEXT" "e" "$ENCRYPT_TEXT" \
		"n" "Rename" "$LOCK_CHOICE" "$LOCK_TEXT" "d" "Delete account"
		)
	else
		CHOICE=$(dialog --stdout --backtitle "$BACKTITLE" --title "Users - $USERNAME" --menu "Settings for user $USERNAME" 0 0 0 \
		"p" "$PASSWD_TEXT" "a" "$ADMIN_TEXT" \
		"e" "$ENCRYPT_TEXT" "n" "Rename" \
		"$LOCK_CHOICE" "$LOCK_TEXT" "d" "Delete account")
	fi

	case $CHOICE in
		p) ## Change/set password
			# We need to ask for old password if home dir is encrypted,
			# so we can re-encrypt their files
			#$SCRIPT_DIR/password set
			sleep 0
			;;
		r) ## Remove password
			# We need to ask for current password if home dir is encrypted,
			# so we can decrypt their files
			#$SCRIPT_DIR/password remove
			sleep 0
			;;
		a) ## Administrator
			if [ $USERNAME_IS_ADMIN == 0 ]; then
				# Make admin only if script is running as root
				if [ "$SCRIPT_USER" == "root" ]; then
					dialog --backtitle "$BACKTITLE" --title "Make administrator" --yesno "Administrators can install and remove software, as well manage the system and other devices. They have access to elevated priviliges by running sudo.\n\nYou can break your system if you're not careful. Don't trust commands from the internet unless you fully understand them. Respect the privacy of others, think before you type and remember: with great power comes great responsibility.\n\nReally make $USERNAME an administrator?" 0 0 && "$SCRIPT_DIR/admin 1 $USERNAME"
				else
					dialog --backtitle "$BACKTITLE" --title "Error" --msgbox "You cannot make yourself an administrator. Ask an administrator to do this." 0 0
				fi
			elif [ $NUM_ADMIN_USERS -gt 1 ]; then
				# Remove administrator if not the only one
				dialog --backtitle "$BACKTITLE" --title "Remove administrator" --yesno "Really remove administrator $USERNAME?" 0 0 && "$SCRIPT_DIR/admin 0 $USERNAME"
			else dialog --backtitle "$BACKTITLE" --title "Error" --msgbox "You are the only administrator. There needs to be at least 1. Create another administrator user before removing administrator priviliges from your account." 0 0; fi;;
		l) ## Lock account
			if [ "$SCRIPT_USER" == "root" ]; then
				dialog --backtitle "$BACKTITLE" --title "Lock $USERNAME?" --yesno "Are you sure you want to lock account $USERNAME? $USERNAME will be forcefully logged out." 0 0 && \
				LockAccount $USERNAME
			else
				dialog --backtitle "$BACKTITLE" --title "Error" --msgbox "You cannot lock your own account!" 0 0
			fi;;
		u) ## Unlock account
			dialog --backtitle "$BACKTITLE" --title "Unlock $USERNAME" --yesno "Are you sure you want to unlock account $USERNAME?" 0 0 && passwd -u $USERNAME;;
		e) ## Encrypt/decrypt
			if [ $ENCRYPTED_HOME == "n" ]; then
				"$SCRIPT_DIR/user-encrypt" "$USERNAME" enable
			else "$SCRIPT_DIR/user-encrypt" "$USERNAME" disable; fi;;
		n) ## Rename account
			# We need to ask for old password if home dir is encrypted,
			# so we can migrate and re-encrypt their files
			sleep 0
			;;
		d) ## Delete account
			# If keeping files, we need to ask for old password if
			# home dir is encrypted, so we can decrypt their files
			sleep 0
			;;
	esac
done
