#!/bin/bash
DISTRO_ID="vapour-os"
DISTRO_NAME="Vapour OS"
if [ -f "/$DISTRO_ID-live" ]; then INSTALL_MODE="iso"
else INSTALL_MODE="system"; fi
Error() {
	echo "[ERROR] $1"
	exit 1
}
Upgrade() {
	false
}
Install() {
	/usr/share/libalpm/scripts/$DISTRO_ID/mirrors # Update Pacman mirrorlists now
	cp -r /usr/share/$DISTRO_ID/custom-configs/etc / # Copy custom configs
	## Create custom /etc/issue greeting
	setterm -cursor on > /etc/issue
	echo -e "$(cat /usr/share/$DISTRO_ID/$DISTRO_ID.ascii)" >> /etc/issue
	echo "\\n \\r \\m" >> /etc/issue
	echo "\\d \\t" >> /etc/issue
	echo "/dev/\\l" >> /etc/issue
	echo "" >> /etc/issue
	echo "Welcome!" >> /etc/issue
	echo "" >> /etc/issue
	
	if [ $INSTALL_MODE == "iso" ]; then
		passwd -u root 1> /dev/null; passwd -d root 1> /dev/null # Unlock root account
		useradd -m live; passwd -dq -n 0 -x -1 # Create passwordless user "live"
		gpasswd -a live wheel; gpasswd -a live games # Add to groups
		rm -rf /etc/*.pacnew
		rm /usr/local/sbin/cat
	else
		passwd -l root # Lock root account (su/sudo still usable)
		# Copy system-specific configs
		VAPOUR_OS_NO_OVERWRITE="$(sh -c '. /etc/mkinitcpio.conf && echo $VAPOUR_OS_NO_OVERWRITE')"
		if [ -z "$VAPOUR_OS_NO_OVERWRITE" ] || [ "$VAPOUR_OS_NO_OVERWRITE" != 1 ]; then
			cp /usr/share/$DISTRO_ID/custom-configs/mkinitcpio.conf /etc/mkinitcpio.conf
		fi
		cp /usr/share/$DISTRO_ID/custom-configs/locale.gen /etc/locale.gen
	fi
	
	locale-gen
	systemctl enable avahi-daemon.socket fstrim.timer NetworkManager systemd-oomd
	Upgrade # Finish installation
}
Uninstall() {
	# Restore default configs
	cp /usr/share/factory/etc/issue /etc/issue
	cp -r /usr/share/$DISTRO_ID/arch-configs/usr/* /usr
	[ -f /etc/lsb-release ] && cp usr/share/$DISTRO_ID/arch-configs/lsb-release /etc/lsb-release
	passwd -u root; passwd -d root # Unlock root account
	
	echo "$DISTRO_NAME has now been uninstalled. Please read the following info:"
	echo "[INFO] The following units may be still enabled: avahi-daemon.socket fstrim.timer NetworkManager systemd-oomd"
	echo "    To disable, run \"sudo systemctl disable <units>\""
	echo "[WARNING] The root account has now been unlocked. This is a huge security risk,"
	echo "    and was done only to prevent administrators from getting locked out."
	echo "    When you are sure everything works properly, re-lock root with \"sudo passwd -l root\""
	echo "    or set a password with \"sudo passwd root\"."
}
SecureBootSetup() {
	if [ -d /sys/firmware/efi ]; then
		sbctl create-keys
		sbctl sign-all -g
		sbctl enroll-keys -m && echo "Secure boot support is now enabled." ||
		echo "[WARNING] Failed to enroll secure boot keys"
		echo "          If you don't wish to use secure boot, you can ignore this warning. Otherwise:"
		echo "           - Enter firmware setup utility and find an option to clear all secure boot certificates."
		echo "             This will disable secure boot and put the firmware in setup mode."
		echo "           - Reboot into $DISTRO_NAME and run the following command: sbctl enroll-keys -m"
		echo "             This will enroll Microsoft's keys and your own secure boot keys to the UEFI."
		echo "             Most OPROMs are signed Microsoft's keys. Without them, most expansion cards, like graphics cards, will not work with secure boot enabled."
		echo "             It is important to enroll Microsoft's keys as well."
		echo "           - Enter firmware setup utility again and enable secure boot."
	fi
}

case $1 in
	install) Install;;
	upgrade) Upgrade;;
	uninstall) Uninstall;;
	*) Error "Unrecognised command \"$1\" - valid commands are install, upgrade, uninstall)";;
esac

